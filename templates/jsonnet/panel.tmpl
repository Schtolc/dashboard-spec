{
  new(
    {{- range $name, $schema := .TopLevelSingleValProperties}}
    {{$name}}={{$schema.DefaultJSON}},
    {{- end}}
  ):: {

    {{- with index .Properties.type}}
    type: {{.DefaultJSON}},
    {{- end}}

    {{- range $name, $schema := .TopLevelSingleValProperties}}
    [if {{$name}} != null then '{{$name}}']: {{$name}},
    {{- end}}

    {{range $topName, $schema := .TopLevelObjectProperties}}
    {{objectInflection (printf "set %s" $topName)}}(
      {{- range $name, $iface := $schema.ConstructableProperties}}
      {{$name}}={{$iface.schema.DefaultJSON}},
      {{- end}}
    ):: self {}
      {{range $name, $iface := $schema.ConstructableProperties -}}
      + { {{$topName}}+: {{range $i, $level := $iface.location -}}
      { {{if eq (add 1 $i) (len $iface.location)}}{{$level}}: {{$name}}{{repeat " }" (len $iface.location)}}{{else}}{{$level}}+: {{end}}{{end}} }
      {{end}},
    {{end}}

    {{range $topName, $iface := .AppendableProperties}}
    {{singularize (objectInflection (printf "add %s" $topName))}}(
      {{- range $name, $schema := $iface.schema.Items.Properties}}
      {{$name}}={{$schema.DefaultJSON}},
      {{- end}}
    ):: self {}
      + {{range $i, $level := $iface.location -}}
      { {{$level}}+: {{if eq (add 1 $i) (len $iface.location)}}[{
        {{- range $name, $schema := $iface.schema.Items.Properties}}
        {{$name}}: {{$name}},
        {{- end}}
      }]{{repeat " }" (len $iface.location) -}}
      {{- end}}
      {{- end}},
    {{end}}

    _nextTarget:: 0,
    addTarget(target):: self {
      local nextTarget = super._nextTarget,
      _nextTarget: nextTarget + 1,
      targets+: [target { refId: std.char(std.codepoint('A') + nextTarget) }],
    },
    addTargets(targets):: std.foldl(function(p, t) p.addTarget(t), targets, self),
  },

  // options
  // fieldConfig
}
