{
  new(
    {{- range $name, $schema := .TopLevelSingleValProperties}}
    {{$name}}={{$schema.DefaultJSON}},
    {{- end}}
  ):: {

    {{- with index .Properties.type}}
    type: {{.DefaultJSON}},
    {{- end}}

    {{- range $name, $schema := .TopLevelSingleValProperties}}
    [if {{$name}} != null then '{{$name}}']: {{$name}},
    {{- end}}

    {{range $topName, $schema := .TopLevelObjectProperties}}
    {{$topName}}(
      {{- range $name, $iface := $schema.FlattenedNonArrayProperties}}
      {{$name}}={{$iface.schema.DefaultJSON}},
      {{- end}}
    ):: self {}
      {{range $name, $iface := $schema.FlattenedNonArrayProperties -}}
      + { {{$topName}}+: {{range $i, $level := $iface.location -}}
      { {{if eq (add 1 $i) (len $iface.location)}}{{$level}}: {{$name}}{{repeat " }" (len $iface.location)}}{{else}}{{$level}}+: {{end}}{{end}} }
      {{end}},
    {{end}}


    // fieldConfig: {
    //   defaults: {
    //     custom: {},
    //     links: [],
    //     mappings: [],
    //     thresholds: {},
    //   }
    // },
    // links: [],
    // targets: [],

    addDataLink(
      {{- with index .Properties.fieldConfig.Properties.defaults.Properties.links}}
      {{- range $name, $schema := .Items.Properties}}
      {{$name}}={{$schema.DefaultJSON}},
      {{- end}}
      {{- end}}
    ):: self {
      links+: [{
        {{- with index .Properties.fieldConfig.Properties.defaults.Properties.links}}
        fieldConfig+: {
          defaults+: {
            links+: [{
              {{- range $name, $schema := .Items.Properties}}
              {{$name}}: {{$name}},
              {{- end}}
            }],
          }
        },
        {{- end}}
      }],
    },

    addLink(
      {{- with index .Properties.links}}
      {{- range $name, $schema := .Items.Properties}}
      {{$name}}={{$schema.DefaultJSON}},
      {{- end}}
      {{- end}}
    ):: self {
      links+: [{
        {{- with index .Properties.links}}
        {{- range $name, $schema := .Items.Properties}}
        {{$name}}: {{$name}},
        {{- end}}
        {{- end}}
      }],
    },

    _nextTarget:: 0,
    addTarget(target):: self {
      local nextTarget = super._nextTarget,
      _nextTarget: nextTarget + 1,
      targets+: [target { refId: std.char(std.codepoint('A') + nextTarget) }],
    },
    addTargets(targets):: std.foldl(function(p, t) p.addTarget(t), targets, self),
  },

  // options
  // fieldConfig
}
